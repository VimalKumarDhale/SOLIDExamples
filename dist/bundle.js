(()=>{"use strict";var e={947:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ContractEmployee=void 0,t.ContractEmployee=class{constructor(e,t){this.name=e,this.salary=t}getMinimumSalary(){return this.salary}}},663:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Employee=void 0,t.Employee=class{getBonus(){return this.salary+.5*this.salary}}},428:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PermanentEmployee=void 0;const o=r(663);class a extends o.Employee{constructor(e,t){super(),this.name=e,this.salary=t}getMinimumSalary(){return this.salary}getBonus(){return this.salary}}t.PermanentEmployee=a},50:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TemporaryEmployee=void 0;const o=r(663);class a extends o.Employee{constructor(e,t){super(),this.name=e,this.salary=t}getMinimumSalary(){return this.salary}getBonus(){return this.salary}}t.TemporaryEmployee=a}},t={};function r(o){var a=t[o];if(void 0!==a)return a.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}(()=>{const e=r(947),t=r(428),o=r(50);let a=new class{constructor(){this.permanentEmployee=new t.PermanentEmployee("Will",4e4),this.temporaryEmployee=new o.TemporaryEmployee("John",4e4),this.contractEmployee=new e.ContractEmployee("Anne",4e4)}getPermanentEmployeeDetail(){const e=this.permanentEmployee.getMinimumSalary(),t=this.permanentEmployee.getBonus();console.log({type:"Permanent",Name:this.permanentEmployee.name,Salary:e,Bonus:t})}getTemporaryEmployeeDetail(){const e=this.temporaryEmployee.getMinimumSalary(),t=this.temporaryEmployee.getBonus();console.log({type:"Temporary",Name:this.permanentEmployee.name,Salary:e,Bonus:t})}getContractEmployeeDetail(){const e=this.contractEmployee.getMinimumSalary();console.log({type:"Contract",name:this.contractEmployee.name,Salary:e})}};a.getPermanentEmployeeDetail(),a.getContractEmployeeDetail(),a.getTemporaryEmployeeDetail()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,